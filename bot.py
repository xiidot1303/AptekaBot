from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, ConversationHandler
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, ChatAction

import os
from conversationList import GLOBAL_NAME, SELECT_DRUGS, SUPERADMIN, UPDATE_EXCEL, START, EDIT_ABOUT_US, UPDATE_ABOUT_US, WRITE_NAME, SEND_PHONE
import sqlite3
from functions import *
import pandas as pd

from dotenv import load_dotenv


basedir = os.path.abspath(os.path.dirname(__file__))
load_dotenv(os.path.join(basedir, '.env'))

superadmin = os.environ.get('SUPERADMIN')

def forward(update, context):
    print(update.message.forward_from)


def issuperadmin(id):
    
    if id == int(superadmin):
        return True
    else:
        return False

def start(update, context):
    
    admins = []
    conn = sqlite3.connect('data.db')
    c = conn.cursor()
    c.execute("SELECT * FROM admins ")
    for i in c.fetchall():

        admins.append(i[0]) 
    
    conn.commit()
    conn.close()   
    if update.message.chat.id == int(superadmin):
        update.message.reply_text("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞", reply_markup=ReplyKeyboardMarkup(keyboard=[['–û–±–Ω–æ–≤–∏—Ç—å Excel'], ['–û –Ω–∞—Åüßæ'], ['–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ãü§ù'], ['–ù–∞—à —Å–∞–π—Ç'], ['–ê–¥–º–∏–Ω—ã']], resize_keyboard=True))
        
        return SUPERADMIN
    elif update.message.chat.id in admins:
        update.message.reply_text("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞", reply_markup=ReplyKeyboardMarkup(keyboard=[['–û–±–Ω–æ–≤–∏—Ç—å Excel'], ['–û –Ω–∞—Åüßæ'], ['–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ãü§ù'], ['–ù–∞—à —Å–∞–π—Ç']], resize_keyboard=True))
        return SUPERADMIN
    else:
        conn = sqlite3.connect('data.db')
        c = conn.cursor()
        c.execute("SELECT * FROM sort WHERE id = {} ".format(update.message.chat.id))
        obj = c.fetchall()
        if not obj:
            c.execute("INSERT INTO sort VALUES ({}, '—Ü–µ–Ω–µ', '–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ', '–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ')".format(update.message.chat.id))
            conn.commit()



        c.execute("SELECT * FROM users WHERE id={}".format(update.message.chat.id))
        user = c.fetchone()
        if user:
            update.message.reply_text("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É –ª–µ–∫. —Å—Ä–µ–¥—Å—Ç–≤ –∏ –∏–∑–¥–µ–ª–∏–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É —Ñ–∞—Ä–º. –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤ –∏ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞—Ä–º. –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π", reply_markup=ReplyKeyboardMarkup(keyboard=[['–ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤üîé'], ['–û –Ω–∞—Åüßæ'], ['–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ãü§ù'], ['–ù–∞—à —Å–∞–π—Ç'], ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è']], resize_keyboard=True))
            conn.commit()
            conn.close()
        else:
            c.execute("INSERT INTO users VALUES ({}, 'x', 'x')".format(update.message.chat.id))
            conn.commit()
            conn.close()
            update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è')
            return WRITE_NAME


#registr
def write_name(update, context):
    conn = sqlite3.connect('data.db')
    c = conn.cursor()
    c.execute("""UPDATE users SET name = '{}' WHERE id={} """.format(update.message.text, update.message.chat.id))

    conn.commit()
    conn.close()
    i_contact = KeyboardButton(text='–æ—Ç–ø—Ä–∞–≤–∏—Ç—å ', request_contact=True)
    update.message.reply_text('–•–æ—Ä–æ—à–æ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=ReplyKeyboardMarkup([[i_contact]], resize_keyboard=True))
    return SEND_PHONE

def send_phone(update, context):
    conn = sqlite3.connect('data.db')
    c = conn.cursor()
    if update.message.contact == None or not update.message.contact:
        c.execute("""UPDATE users SET phone_number = '{}' WHERE id={} """.format(str(update.message.text), update.message.chat.id))
    else:
        c.execute("""UPDATE users SET phone_number = '{}' WHERE id={} """.format(str(update.message.contact.phone_number), update.message.chat.id))

    conn.commit()
    conn.close()
    update.message.reply_text("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É –ª–µ–∫. —Å—Ä–µ–¥—Å—Ç–≤ –∏ –∏–∑–¥–µ–ª–∏–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É —Ñ–∞—Ä–º. –¥–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤ –∏ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ñ–∞—Ä–º. –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π", reply_markup=ReplyKeyboardMarkup(keyboard=[['–ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤üîé'], ['–û –Ω–∞—Åüßæ'], ['–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ãü§ù'], ['–ù–∞—à —Å–∞–π—Ç'], ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è']], resize_keyboard=True))
    return ConversationHandler.END


def global_name(update, context):
    bot = context.bot
    text = update.message.text 
    if text == '–ù–∞–∑–∞–¥':
        conn = sqlite3.connect('data.db')
        c = conn.cursor()
        c.execute("SELECT * FROM list_after_search WHERE id={}".format(update.message.chat.id))
        for i in c.fetchall():
            c.execute("DELETE FROM list_after_search WHERE id={} ".format(update.message.chat.id))
        conn.commit()
        conn.close()
        update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=ReplyKeyboardMarkup(keyboard=[['–ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤üîé'], ['–û –Ω–∞—Åüßæ'], ['–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ãü§ù'], ['–ù–∞—à —Å–∞–π—Ç'], ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è']], resize_keyboard=True))
        return ConversationHandler.END
    else:
        bot.send_chat_action(chat_id=update.message.chat.id, action=ChatAction.TYPING)
        p = os.listdir()
        for i in p:
            if i[-3::] == 'xls' or i[-4::] == 'xlsx':
                path = i
                break

        name = update.message.text.lower()
        df = pd.read_excel('{}'.format(path), sheet_name=0)
        
        if '–µ' in name:
            name = name.replace('–µ', '(–µ|—ë)')
        if '—ã' in name:
            name = name.replace('—ã', '(—ã|–∏)')
        if '–∞' in name:
            name = name.replace('–∞', '(–∞|–æ)')
        if '–æ' in name:
            name = name.replace('–æ', '(–∞|–æ)')
            if '–∞|(–∞|–æ)' in name:
                name = name.replace('–∞|(–∞|–æ)', '–∞|–æ')
        if '–∏' in name:
            name = name.replace('–∏', '(–∏|—ã)')
            if '—ã|(–∏|—ã)' in name:
                name = name.replace('—ã|(–∏|—ã)', '—ã|–∏')
        if '—É' in name:
            name = name.replace('—É', '(—é|—É)')
        
        if '—Å—Å' in name:
            name = name.replace('—Å—Å', '—Å(—Å)?')
        elif '—Å' in name:
            name = name.replace('—Å', '(—Ü|—Å)(—Å)?')
        if '-' in name:
            name = name.replace('-', '(-)?')
        if ' ' in name:
            name = name.replace(' ', '[-, ]?')
        if '—à' in name:
            name = name.replace('—à', '(-)?(—â|—à)(-)?')
        
        if '–∫–∫' in name:
            name = name.replace('–∫', '–∫(–∫)?')
        elif '–¥' in name:
            name = name.replace('–∫', '–∫(–∫)?')

        if '–¥–¥' in name:
            name = name.replace('–¥', '–¥(-)?(–¥)?')
        elif '–¥' in name:
            name = name.replace('–¥', '–¥(-)?(–¥)?')
        
        if '–Ω–Ω' in name:
            name = name.replace('–Ω–Ω', '–Ω(-)?(–Ω)?')
        elif '–Ω' in name:
            name = name.replace('–Ω', '–Ω(-)?(–Ω)?')
        
        if '–ª–ª' in name:
            name = name.replace('–ª–ª', '–ª(–ª)?')
        elif '–ª' in name:
            name = name.replace('–ª', '–ª(–ª)?(—å)?')
        
        for i in ['–≥–≥', '–∑–∑', '—Ñ—Ñ', '–≤–≤', '–ø–ø', '—Ä—Ä', '–∂–∂', '–º–º', '—Ç—Ç']:
            if i in name:
                name = name.replace(i, '{}({})?'.format(i[0], i[0]))
            elif i[0] in name:
                name = name.replace(i[0], '{}({})?'.format(i[0], i[0]))


        if '1' in name or '2' in name or '3' in name or '4' in name or '5' in name or '6' in name or '7' in name or '8' in name or '9' in name:
            numbers = '123456789'
            for n in name:
                if n in numbers:
                    name = name.replace(n, '[-, ]?{}[-, ]?'.format(n))
        df1 = df[(df[df.columns[0]].str.lower().str.contains(r'^(?!a-z){}(/|)|([-, ,\W,:space:]){}(/|)'.format(name.lower(), name.lower()), na=False, regex=True))]
        last_search = True
        if df1.empty:
            
            word = kiril_to_latin(update.message.text)
            conn = sqlite3.connect('data.db')
            c = conn.cursor()
            c.execute("select * from all_list where soundex(a)=soundex('{}') ".format(word))
            all = c.fetchall()
            
            l = [i[1] for i in all]
            conn.close()
            #print(l)
            if l != []:

                last_search = False
        else:
            l = df1[df1.columns[1]]
            all = df1.values.tolist()
            
            last_search = False
        if last_search:
            
            df1 = df[(df[df.columns[2]].str.lower().str.contains(r'{}'.format(name.lower()), na=False, regex=True))]
            all = df1.values.tolist()
            l = df1[df1.columns[1]]
        items = []
        texts = []
        index = 0
        conn = sqlite3.connect('data.db')
        c = conn.cursor()
        c.execute("select * from list_transfer where id={}".format(update.message.chat.id))
        for aa in c.fetchall():
            c.execute("delete from list_transfer where id={}".format(update.message.chat.id))
        conn.commit()
        break_ = False
        for i in l:
            if not i in texts:
                texts.append(i)
                if break_:
                    c.execute("insert into list_transfer values ({}, '{}', '{}') ".format(update.message.chat.id, i, str(index)))
                    index += 1
                    continue
                if '`' in i:
                    i = i.replace('`', ' ')
                
                if len(items) <= 10:
                    
                    items.append([InlineKeyboardButton(text=i, callback_data=str(index))])

                    c.execute("insert into list_transfer values ({}, '{}', '{}') ".format(update.message.chat.id, i, str(index)))
                    index += 1

                else:
                    items.append([InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π‚û°Ô∏è', callback_data='{}_next_2'.format(str(update.message.chat.id)))])
                    break_ = True
        conn.commit()
        conn.close()
        if len(items) == 0:
            
            update.message.reply_text('–î–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –Ω–µ—Ç –≤ –Ω–∞—à–∏—Ö —Å–ø–∏—Å–∫–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
            return GLOBAL_NAME
        else:
        
            update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.', reply_markup=InlineKeyboardMarkup(items))
            conn = sqlite3.connect('data.db')
            c = conn.cursor()
            c.execute("SELECT * FROM access_to_find WHERE id={} ".format(update.message.chat.id))
            n = c.fetchone()[2]
            c.execute("""UPDATE access_to_find SET chance = {} WHERE id={} """.format(int(n)-1, update.message.chat.id))
            conn.commit()
            for i in all:
                i = i[1:]
            
                c.execute("SELECT * FROM list_after_search WHERE id={} AND zero='{}' AND nine='{}' AND eight='{}' ".format(update.message.chat.id, i[0], i[9], i[8]))
                if not c.fetchone():
                    if i[4] == '–¥–æ–≥–æ–≤.':
                        i[4] = 1
                    elif i[4] == '–æ–∂–∏–¥–∞–µ–º—ã–π':
                        i[4] = 0
                    if '`' in i[0]:
                        i[0] = i[0].replace('`', ' ')


                    c.execute("INSERT INTO list_after_search VALUES ({}, '{}', '{}','{}','{}',{},'{}','{}','{}','{}','{}','{}') ".format(update.message.chat.id,*i))
            conn.commit()            
            conn.close()
            return GLOBAL_NAME
    

def select_drugs(update, context):
    update = update.callback_query
    bot = context.bot
    name = update.data
    conn = sqlite3.connect('data.db')
    c = conn.cursor()
    if 'index' in name:
        return GLOBAL_NAME
    if 'next_' in name:
        try:
            data, ttt, n = name.split('_') # ttt is unneccessary n is page_n, data is user id
            c.execute("select * from list_transfer where id={}".format(update.message.chat.id))
            obj = c.fetchall()


            breaknvalues = (int(n) - 1) * 11
            ls = []  # new list
            for i in obj[breaknvalues:]:
                if len(ls) <= 10:

                    ls.append([InlineKeyboardButton(text=i[1], callback_data=i[2])])
                else:
                    nn = str(int(n)+1) # next n 
                    pn = str(int(n)-1) # previous n
                    if pn == '0':
                        ls.append([InlineKeyboardButton(text=n, callback_data='index'), InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π‚û°Ô∏è', callback_data='{}_next_{}'.format(update.message.chat.id, nn))])
                    else:
                        ls.append([InlineKeyboardButton(text='‚¨ÖÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='{}_previous_{}'.format(update.message.chat.id, pn)), InlineKeyboardButton(text=n, callback_data='index'), InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π‚û°Ô∏è', callback_data='{}_next_{}'.format(update.message.chat.id, nn))])
                    break
            else:
                pn = str(int(n)-1)
                if pn != '0':
                    ls.append([InlineKeyboardButton(text='‚¨ÖÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='{}_previous_{}'.format(update.message.chat.id, pn)), InlineKeyboardButton(text=n, callback_data='index')])

            update.edit_message_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.', reply_markup=InlineKeyboardMarkup(ls))
            return GLOBAL_NAME
        except:
            dgeduie = 0
    if 'previous_' in name:
        if True:
            data, ttt, n = name.split('_') # ttt is unneccessary n is page_n
            c.execute("select * from list_transfer where id={}".format(update.message.chat.id))
            obj = c.fetchall()
            
            
            breaknvalues = (int(n) - 1) * 9
            ls = []
            for i in obj[breaknvalues:]:
                if len(ls) <= 10:
                    ls.append([InlineKeyboardButton(text=i[1], callback_data=i[2])])
                else:
                    nn = str(int(n)+1)
                    pn = str(int(n)-1)


                    if pn == '0':
                        ls.append([InlineKeyboardButton(text=n, callback_data='index'), InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π‚û°Ô∏è', callback_data='{}_next_{}'.format(update.message.chat.id, nn))])
                    else:
                        ls.append([InlineKeyboardButton(text='‚¨ÖÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='{}_previous_{}'.format(update.message.chat.id, pn)), InlineKeyboardButton(text=n, callback_data='index'), InlineKeyboardButton(text='–°–ª–µ–¥—É—é—â–∏–π‚û°Ô∏è', callback_data='{}_next_{}'.format(update.message.chat.id, nn))])
                    break
            else:
                pn = str(int(n)-1)
                if pn != '0':
                    ls.append([InlineKeyboardButton(text='‚¨ÖÔ∏è–ü—Ä–µ–¥—ã–¥—É—â–∏–π', callback_data='{}_previous_{}'.format(update.message.chat.id, pn)), InlineKeyboardButton(text=n, callback_data='index')])

            update.edit_message_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.', reply_markup=InlineKeyboardMarkup(ls))
            return GLOBAL_NAME

        #except:
        #    dededede = 0
    bot.send_chat_action(chat_id=update.message.chat.id, action=ChatAction.TYPING)
 
    c.execute("select title from list_transfer where  id={} and number='{}' ".format(update.message.chat.id, name))
    name = c.fetchone()[0]
    c.execute("SELECT * FROM message WHERE id={} ".format(update.message.chat.id))
    for i in c.fetchall():
        try:
            bot.delete_message(update.message.chat.id, i[1])
        except:
            qwqw = 0
        c.execute("DELETE FROM message WHERE id={} ".format(update.message.chat.id))
        conn.commit()
    print(name)
    c.execute("SELECT zero, one, two, three, four, five, six, seven, eight, nine, ten FROM list_after_search WHERE zero='{}' ".format(name))
    w = c.fetchall()
    if not w:
        bot.send_message(update.message.chat.id, '–û—à–∏–±–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç, –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π –≤ —Å–ø–∏—Å–∫–µ')
        return GLOBAL_NAME
    c.execute("SELECT * FROM sort WHERE id = {} ".format(update.message.chat.id))
    obj = c.fetchone()
    if obj[1] == '—Ü–µ–Ω–µ':
        
        if obj[2] == '–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ':
            w = sort_price_grow(w)
        elif obj[2] == '—É–±—ã–≤–∞–Ω–∏–µ':
            w = sort_price_wane(w)
    elif obj[1] == '–ø—Ä–æ—Ü–µ–Ω—Ç–∞–º':
        
        if obj[3] == '–≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏–µ':
            w = sort_percent_grow(w)
        elif obj[3] == '—É–±—ã–≤–∞–Ω–∏–µ':
            w = sort_percent_wane(w)
    
    c.execute("SELECT * FROM date ")
    f = c.fetchone()[0]
    
    d = ''
    for x in str(f):
        if x == ' ':
            break
        else:
            d += x
    all = w
    minn = 10000000000000000000000000.0
    maxn = 0
    results = ''
    n = 0
    for w in all:
        w4 = w[4]
        if int(w4) == 0:
            w4 = '–æ–∂–∏–¥–∞–µ–º—ã–π'
        elif int(w4) == 1:
            w4 = '–¥–æ–≥–æ–≤.'
        if maxn < w[4] and w[4] != 0:
            maxn = w[4]
        if minn > w[4]  and w[4] != 0:
            minn = w[4]
        results += '\n–î–∏—Å—Ç—Ä–∏–±—å—é—Ç–æ—Ä: ' + w[8] + '\n–ù–∞–∑–≤–∞–Ω–∏—è: ' + w[0] + '\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: ' + w[9] + '({})'.format(w[10]) + '\n–ê–¥—Ä–µ—Å:' + find_address(w[8]) + '\n–¶–µ–Ω–∞ —Å—É–º: ' + str(w4) + '\n–¢–µ–ª–µ—Ñ–æ–Ω: '+ find_phone(w[8]) + '\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n'
        n += 1
        if n == 6:
            results = '–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å–∞: ' + d + '\n' + results
            m = bot.send_message(update.message.chat.id, results)
            
            c.execute("INSERT INTO message VALUES ({}, {}) ".format(update.message.chat.id, m.message_id))
            conn.commit()
            results = ''
            n = 0
    if minn != maxn and minn != 0:
        min_and_max = '‚ÜóÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {} —Å—É–º.\n‚ÜòÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:  {} —Å—É–º.'.format(str(maxn), str(minn))
    if n != 0:
        results = '–î–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–π—Å–∞: ' + d + '\n' + results
        m = bot.send_message(update.message.chat.id, results)
        print(m)
        c.execute("INSERT INTO message VALUES ({}, {}) ".format(update.message.chat.id, m.message_id))
        conn.commit()
    if minn != maxn and minn != 0:
        m = bot.send_message(update.message.chat.id, min_and_max)
        c.execute("INSERT INTO message VALUES ({}, {}) ".format(update.message.chat.id, m.message_id))
        conn.commit()
# checkng that user has accces to find, no use all 5 chances
    c.execute("SELECT * FROM access_to_find WHERE id={} ".format(update.message.chat.id))
    f = update.message.date
    fetchone = c.fetchone()
    d = ''
    for x in str(f):
        if x == ' ':
            break
        else:
            d += x
    if not fetchone:
        c.execute("INSERT INTO access_to_find VALUES ({}, '{}', 500)".format(update.message.chat.id, d))
        conn.commit()
        #update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∞ –Ω–∞—à –±–æ—Ç –ø–æ–¥—Å–∫–∞–∂–µ—Ç –í–∞–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n–ü—Ä–∏–º–µ—Ä: –∞–Ω–∞–ª—å–≥–∏–Ω\n(–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)', reply_markup = ReplyKeyboardMarkup(keyboard=[['–ù–∞–∑–∞–¥']], resize_keyboard=True))
        conn.close()
        return GLOBAL_NAME
    else:
        date = fetchone[1]
        chance = fetchone[2]
        y, m, last_day = date.split('-')
        y1, m1, current_day = d.split('-')
        print(last_day, current_day)
        if last_day == current_day:
            if int(chance) <= 0:
                
                update.message.reply_text('–õ–∏–º–∏—Ç –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–æ–∏—Å–∫ 5 —Ä–∞–∑\n–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ —ç—Ç–æ', reply_markup=ReplyKeyboardMarkup(keyboard=[['–ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤üîé'], ['–û –Ω–∞—Åüßæ'], ['–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ãü§ù'], ['–ù–∞—à —Å–∞–π—Ç'], ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è']], resize_keyboard=True))
                return ConversationHandler.END
            else:
                #update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∞ –Ω–∞—à –±–æ—Ç –ø–æ–¥—Å–∫–∞–∂–µ—Ç –í–∞–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n–ü—Ä–∏–º–µ—Ä: –∞–Ω–∞–ª—å–≥–∏–Ω\n(–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)', reply_markup = ReplyKeyboardMarkup(keyboard=[['–ù–∞–∑–∞–¥']], resize_keyboard=True))
                conn.close()
                return GLOBAL_NAME
        else:
            c.execute("""UPDATE access_to_find SET last_date = '{}' WHERE id={} """.format(current_day, update.message.chat.id))
            c.execute("""UPDATE access_to_find SET chance = 500 WHERE id={} """.format(update.message.chat.id))
            conn.commit()
            #update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞, –∞ –Ω–∞—à –±–æ—Ç –ø–æ–¥—Å–∫–∞–∂–µ—Ç –í–∞–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n\n–ü—Ä–∏–º–µ—Ä: –∞–Ω–∞–ª—å–≥–∏–Ω\n(–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)', reply_markup = ReplyKeyboardMarkup(keyboard=[['–ù–∞–∑–∞–¥']], resize_keyboard=True))
            conn.close()
            return GLOBAL_NAME



def find_address(title):
    try:
        conn = sqlite3.connect("data.db")
        c = conn.cursor()
        c.execute("SELECT * FROM address_and_phone WHERE name LIKE '%{}%' ".format(title.lower()))
        r = c.fetchone()[2]
        if r:
            return r
        else:
            return '–ù–µ —É–∫–∞–∑–∞–Ω' 
        conn.close()
    except:
        return '–ù–µ —É–∫–∞–∑–∞–Ω'

def find_phone(title):
    try:
        conn = sqlite3.connect("data.db")
        c = conn.cursor()
        c.execute("SELECT * FROM address_and_phone WHERE name LIKE '%{}%' ".format(title.lower()))
        r = c.fetchone()[1]
        if r:
            return r
        else:
            return '–ù–µ —É–∫–∞–∑–∞–Ω' 
        conn.close()
    except:
        return '–ù–µ —É–∫–∞–∑–∞–Ω'



def doc(update, context):

    bot = context.bot
    doc = bot.get_file(update.message.document.file_id)
    doc.download(update.message.document.file_name)
    
    p = os.listdir()
    for i in p:
        if i[-3::] == 'xls' or i[-4::] == 'xlsx':
            path = i
            break
    

def update_excel(update, context):
    if not update.message.text == None:
        if issuperadmin(update.message.chat.id):
            update.message.reply_text("–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞", reply_markup=ReplyKeyboardMarkup(keyboard=[['–û–±–Ω–æ–≤–∏—Ç—å Excel'], ['–û –Ω–∞—Åüßæ'], ['–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ãü§ù'], ['–ù–∞—à —Å–∞–π—Ç'], ['–ê–¥–º–∏–Ω—ã']], resize_keyboard=True))
        else:
            update.message.reply_text("–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞", reply_markup=ReplyKeyboardMarkup(keyboard=[['–û–±–Ω–æ–≤–∏—Ç—å Excel'], ['–û –Ω–∞—Åüßæ'], ['–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ãü§ù'], ['–ù–∞—à —Å–∞–π—Ç']], resize_keyboard=True))
        return SUPERADMIN    
    else:
        bot = context.bot
        bot.send_chat_action(chat_id=update.message.chat.id, action=ChatAction.TYPING)
        p = os.listdir()
        for i in p:
            if i[-3::] == 'xls' or i[-4::] == 'xlsx':
                path = i
                break
        os.remove(path)
        conn = sqlite3.connect('data.db')
        c = conn.cursor()
        c.execute("""UPDATE date SET datetime = '{}' """.format(str(update.message.date)))
        conn.commit()
        bot = context.bot
        doc = bot.get_file(update.message.document.file_id)
        doc.download(update.message.document.file_name)

        p = os.listdir()
        for i in p:
            if i[-3::] == 'xls' or i[-4::] == 'xlsx':
                path = i
                break
        c.execute("SELECT * FROM address_and_phone ")
        for i in c.fetchall():
            c.execute("DELETE FROM address_and_phone ")
        conn.commit()
        df = pd.read_excel('{}'.format(path), sheet_name=1)
        for i in df.values.tolist():
        
            try:

                c.execute("INSERT INTO address_and_phone VALUES ('{}','{}','{}') ".format(i[1].lower(), i[2], i[3]))

            except:
                fnwow = 0
        c.execute("select * from all_list ")
        for i in c.fetchall():
            c.execute("delete from all_list ")
        df = pd.read_excel('{}'.format(path), sheet_name=0)
        for i in df.values.tolist():
            try:
                i[0] = kiril_to_latin(i[0])
                c.execute("insert into all_list values ('{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}', '{}') ".format(*i))
            except:
                ewfdeqwf = 0  # do nothing
        conn.commit()
        conn.close()


        if issuperadmin(update.message.chat.id):
            update.message.reply_text("–≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞", reply_markup=ReplyKeyboardMarkup(keyboard=[['–û–±–Ω–æ–≤–∏—Ç—å Excel'], ['–û –Ω–∞—Åüßæ'], ['–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ãü§ù'], ['–ù–∞—à —Å–∞–π—Ç'], ['–ê–¥–º–∏–Ω—ã']], resize_keyboard=True))
        else:
            update.message.reply_text("–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–æ—Ç–∞", reply_markup=ReplyKeyboardMarkup(keyboard=[['–û–±–Ω–æ–≤–∏—Ç—å Excel'], ['–û –Ω–∞—Åüßæ'], ['–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—ãü§ù'], ['–ù–∞—à —Å–∞–π—Ç']], resize_keyboard=True))
        return SUPERADMIN

def cancel(update, context):
    bot = context.bot
    c = update.callback_query 
    if update.callback_query.data == 'next':
        c.edit_message_text('–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç')
        return ConversationHandler.END

